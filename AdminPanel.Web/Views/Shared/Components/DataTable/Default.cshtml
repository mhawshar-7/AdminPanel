@model AdminPanel.Web.Models.DataTableConfiguration
@{
    var tableId = Model.Id;
    var hasCheckboxes = Model.ShowCheckboxes;
    var hasActions = Model.ActionButtons.Any();
    var editUrl = "";
    var deleteUrl = "";

    if (hasActions)
    {
        var editButton = Model.ActionButtons.FirstOrDefault(b => b.Action?.ToLower() == "edit");
        var deleteButton = Model.ActionButtons.FirstOrDefault(b => b.Action?.ToLower() == "remove" || b.Action?.ToLower() == "delete");

        if (editButton != null && !string.IsNullOrEmpty(editButton.Controller) && !string.IsNullOrEmpty(editButton.Action))
        {
            editUrl = Url.Action(editButton.Action, editButton.Controller);
        }

        if (deleteButton != null && !string.IsNullOrEmpty(deleteButton.Controller) && !string.IsNullOrEmpty(deleteButton.Action))
        {
            deleteUrl = Url.Action(deleteButton.Action, deleteButton.Controller);
        }
    }
}

@if (Model.WrapInCard)
{
    <div class="@Model.CardCssClass">
        @if (!string.IsNullOrEmpty(Model.Title) || Model.ShowSearchBox || Model.HeaderButtons.Any())
        {
            <!--begin::Card header-->
            <div class="card-header align-items-center py-5 gap-2 gap-md-5">
                <!--begin::Card title-->
                <div class="card-title">
                    @if (!string.IsNullOrEmpty(Model.Title))
                    {
                        <h3 class="card-label">@Model.Title</h3>
                    }
                    @if (Model.ShowSearchBox)
                    {
                        <!--begin::Search-->
                        <div class="d-flex align-items-center position-relative my-1">
                            <i class="ki-duotone ki-magnifier fs-3 position-absolute ms-4">
                                <span class="path1"></span>
                                <span class="path2"></span>
                            </i>
                            <input type="text" id="@(tableId)_search" class="form-control form-control-solid w-250px ps-12" placeholder="@(Model.SearchPlaceholder ?? "Search...")" />
                        </div>
                        <!--end::Search-->
                    }
                </div>
                <!--end::Card title-->
                @if (Model.HeaderButtons.Any())
                {
                    <!--begin::Card toolbar-->
                    <div class="card-toolbar">
                        @foreach (var button in Model.HeaderButtons)
                        {
                            @if (button.Type == AdminPanel.Web.Models.DataTableActionButtonType.Link && !string.IsNullOrEmpty(button.Controller) && !string.IsNullOrEmpty(button.Action))
                            {
                                <a asp-controller="@button.Controller" asp-action="@button.Action" class="@button.CssClass">
                                    @if (!string.IsNullOrEmpty(button.Icon))
                                    {
                                        <i class="@button.Icon"></i>
                                    }
                                    @button.Text
                                </a>
                            }
                            else if (!string.IsNullOrEmpty(button.Url))
                            {
                                <a href="@button.Url" class="@button.CssClass">
                                    @if (!string.IsNullOrEmpty(button.Icon))
                                    {
                                        <i class="@button.Icon"></i>
                                    }
                                    @button.Text
                                </a>
                            }
                        }
                    </div>
                    <!--end::Card toolbar-->
                }
            </div>
            <!--end::Card header-->
        }

        <!--begin::Card body-->
        <div class="card-body pt-0">

            <table class="@Model.CssClass" id="@tableId">
                <thead>
                    <tr class="text-start text-gray-500 fw-bold fs-7 text-uppercase gs-0">
                        @if (hasCheckboxes)
                        {
                            <th class="w-10px pe-2">
                                <div class="form-check form-check-sm form-check-custom form-check-solid me-3">
                                    <input class="form-check-input" type="checkbox" data-kt-check="true" data-kt-check-target="#@tableId .form-check-input" value="1" />
                                </div>
                            </th>
                        }

                        @foreach (var column in Model.Columns.Where(c => c.Visible && !c.Name.Equals("actions", StringComparison.OrdinalIgnoreCase)))
                        {
                            <th class="@column.ClassName" @if(!string.IsNullOrEmpty(column.Width)) {
                            <text>style="width: @column.Width"</text>
                        }
    >
                        @column.Title
                    </th>
                    }

                    @if (hasActions)
                    {
                        var actionsColumn = Model.Columns.FirstOrDefault(c => c.Name.Equals("actions", StringComparison.OrdinalIgnoreCase));
                        <th class="@(actionsColumn?.ClassName ?? "text-end min-w-70px")">
                            @(actionsColumn?.Title ?? "Actions")
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="fw-semibold text-gray-600">
                <!-- DataTables will populate this -->
            </tbody>
        </table>
    </div>
    <!--end::Card body-->
</div>
}

<!-- DataTable Configuration -->
<script type="text/javascript">
    window.@(tableId)Config = {
        editUrl: '@editUrl',
        deleteUrl: '@deleteUrl',
        ajaxUrl: '@Model.AjaxUrl',
        hasCheckboxes: @hasCheckboxes.ToString().ToLower(),
        hasActions: @hasActions.ToString().ToLower(),
        serverSide: @Model.ServerSide.ToString().ToLower(),
        paging: @Model.Paging.ToString().ToLower(),
        searching: @Model.Searching.ToString().ToLower(),
        ordering: @Model.Ordering.ToString().ToLower(),
        info: @Model.Info.ToString().ToLower(),
        pageLength: @Model.PageLength,
        responsive: @Model.Responsive.ToString().ToLower(),
        showSearchBox: @Model.ShowSearchBox.ToString().ToLower(),
        columns: [
            @if (hasCheckboxes)
            {
                    <text>{
                        data: null,
                        orderable: false,
                        searchable: false,
                        className: "w-10px pe-2",
                        render: function(data, type, row) {
                            return '<div class="form-check form-check-sm form-check-custom form-check-solid"><input class="form-check-input" type="checkbox" value="' + (row.id || '') + '" /></div>';
                        }
                    },</text>
            }

            @foreach (var column in Model.Columns.Where(c => c.Visible && !c.Name.Equals("actions", StringComparison.OrdinalIgnoreCase)))
            {
                    <text>{
                        data: "@column.Name",
                        name: "@column.Name",
                        orderable: @column.Sortable.ToString().ToLower(),
                        searchable: @column.Searchable.ToString().ToLower()@if (!string.IsNullOrEmpty(column.ClassName))
                        {
                                <text>,
                            className: "@column.ClassName"</text>
                        }
    @if (column.Type == AdminPanel.Web.Models.DataTableColumnType.Date)
                        {
                                <text>,
                            render: function(data, type, row) {
                                return data || '';
                            }</text>
                        }
                    },</text>
            }

            @if (hasActions)
            {
                    <text>{
                        data: null,
                        orderable: false,
                        searchable: false,
                        className: "@(Model.Columns.FirstOrDefault(c => c.Name.Equals("actions", StringComparison.OrdinalIgnoreCase))?.ClassName ?? "text-end min-w-70px")",
                        render: function(data, type, row) {
                            var actions = '<div class="dropdown">';
                            actions += '<a href="#" class="btn btn-sm btn-light btn-active-light-primary btn-flex btn-center" data-kt-menu-trigger="click" data-kt-menu-placement="bottom-end">';
                            actions += 'Actions <i class="ki-duotone ki-down fs-5 ms-1"></i></a>';
                            actions += '<div class="menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-semibold fs-7 w-125px py-4" data-kt-menu="true">';

                            if (window.@(tableId)Config.editUrl) {
                                actions += '<div class="menu-item px-3">';
                                actions += '<a href="' + window.@(tableId)Config.editUrl + '/' + (row.id || '') + '" class="menu-link px-3">';
                                actions += '<i class="ki-duotone ki-pencil"></i> Edit</a>';
                                actions += '</div>';
                            }

                            if (window.@(tableId)Config.deleteUrl) {
                                actions += '<div class="menu-item px-3">';
                                actions += '<a href="' + window.@(tableId)Config.deleteUrl + '/' + (row.id || '') + '" class="menu-link px-3 confirm-action" data-message="Are you sure you want to delete this item?">';
                                actions += '<i class="ki-duotone ki-trash"></i> Delete</a>';
                                actions += '</div>';
                            }

                            actions += '</div></div>';
                            return actions;
                        }
                    }</text>
            }
        ]
    };
</script>

<script type="text/javascript">
    $(document).ready(function() {
        var config = window.@(tableId)Config;

        // Build DataTable configuration
        var tableConfig = {
            serverSide: config.serverSide,
            processing: true,
            paging: config.paging,
            searching: config.searching,
            ordering: config.ordering,
            info: config.info,
            pageLength: config.pageLength,
            responsive: config.responsive,
            language: {
                emptyTable: "@(Model.EmptyTableMessage ?? "No data available in table")",
                processing: '<div class="d-flex justify-content-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>'
            },
            columns: config.columns
        };

        // Add AJAX configuration if server-side
        if (config.serverSide && config.ajaxUrl) {
            tableConfig.ajax = {
                url: config.ajaxUrl,
                type: "POST",
                dataType: "json"
            };
        }

        // Initialize DataTable
        var table = $('#@tableId').DataTable(tableConfig);

        // Custom search box
        if (config.showSearchBox) {
            $('#@(tableId)_search').on('keyup', function() {
                table.search(this.value).draw();
            });
        }

        // Handle confirmation dialogs
        $(document).on('click', '.confirm-action', function(e) {
            e.preventDefault();
            var url = $(this).attr('href');
            var message = $(this).data('message') || 'Are you sure?';

            if (confirm(message)) {
                window.location.href = url;
            }
        });
    });
</script>