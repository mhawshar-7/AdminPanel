@using AdminPanel.Web.Models
@using AdminPanel.Web.Models.DataTable

@{
    ViewData["Title"] = "DataTable Examples";
}

<div class="container-fluid">
    <h1>DataTable ViewComponent Examples</h1>
    <p>This page demonstrates various configurations of the reusable DataTable ViewComponent.</p>

    <!-- Example 1: Basic Table with Server-Side Processing -->
    <div class="mb-10">
        <h3>Example 1: Basic Server-Side Table</h3>
        @{
            var basicConfig = new DataTableConfiguration
            {
                Id = "basicTable",
                Title = "Basic Projects Table",
                AjaxUrl = Url.Action("GetProjectsData", "Projects"),
                ServerSide = true,
                Columns = new List<DataTableColumn>
                {
                    new DataTableColumn { Name = "name", Title = "Name" },
                    new DataTableColumn { Name = "description", Title = "Description" },
                    new DataTableColumn { Name = "modifiedDate", Title = "Date", Type = DataTableColumnType.Date }
                }
            };
        }
        @await Component.InvokeAsync("DataTable", basicConfig)
    </div>

    <!-- Example 2: Table with Custom Actions -->
    <div class="mb-10">
        <h3>Example 2: Table with Custom Action Buttons</h3>
        @{
            var actionsConfig = new DataTableConfiguration
            {
                Id = "actionsTable",
                Title = "Projects with Actions",
                AjaxUrl = Url.Action("GetProjectsData", "Projects"),
                ServerSide = true,
                ShowCheckboxes = true,
                Columns = new List<DataTableColumn>
                {
                    new DataTableColumn { Name = "name", Title = "Project Name", ClassName = "fw-bold" },
                    new DataTableColumn { Name = "description", Title = "Description" },
                    new DataTableColumn { Name = "modifiedDate", Title = "Created", Type = DataTableColumnType.Date }
                },
                ActionButtons = new List<DataTableActionButton>
                {
                    new DataTableActionButton 
                    { 
                        Text = "View", 
                        Controller = "Projects", 
                        Action = "Details",
                        Icon = "ki-duotone ki-eye"
                    },
                    new DataTableActionButton 
                    { 
                        Text = "Edit", 
                        Controller = "Projects", 
                        Action = "Edit",
                        Icon = "ki-duotone ki-pencil"
                    },
                    new DataTableActionButton 
                    { 
                        Text = "Delete", 
                        Controller = "Projects", 
                        Action = "Remove",
                        Icon = "ki-duotone ki-trash",
                        ConfirmAction = true,
                        ConfirmMessage = "Are you sure you want to delete this project? This action cannot be undone."
                    }
                },
                HeaderButtons = new List<DataTableActionButton>
                {
                    new DataTableActionButton { Text = "New Project", Controller = "Projects", Action = "Edit", CssClass = "btn btn-primary" },
                    new DataTableActionButton { Text = "Export", Url = "/Projects/Export", CssClass = "btn btn-light-primary" }
                }
            };
        }
        @await Component.InvokeAsync("DataTable", actionsConfig)
    </div>

    <!-- Example 3: Compact Table without Card Wrapper -->
    <div class="mb-10">
        <h3>Example 3: Compact Table (No Card Wrapper)</h3>
        @{
            var compactConfig = new DataTableConfiguration
            {
                Id = "compactTable",
                AjaxUrl = Url.Action("GetProjectsData", "Projects"),
                ServerSide = true,
                WrapInCard = false,
                ShowSearchBox = false,
                PageLength = 5,
                CssClass = "table table-sm table-striped",
                Columns = new List<DataTableColumn>
                {
                    new DataTableColumn { Name = "name", Title = "Name" },
                    new DataTableColumn { Name = "modifiedDate", Title = "Date", Type = DataTableColumnType.Date }
                },
                ActionButtons = new List<DataTableActionButton>
                {
                    new DataTableActionButton { Text = "Edit", Controller = "Projects", Action = "Edit", CssClass = "btn btn-sm btn-primary" }
                }
            };
        }
        @await Component.InvokeAsync("DataTable", compactConfig)
    </div>

    <!-- Example 4: Client-Side Table (for small datasets) -->
    <div class="mb-10">
        <h3>Example 4: Client-Side Processing</h3>
        <p><em>Note: This example would require pre-loaded data. For demonstration purposes, it shows the configuration.</em></p>
        @{
            var clientSideConfig = new DataTableConfiguration
            {
                Id = "clientTable",
                Title = "Client-Side Table",
                ServerSide = false, // Client-side processing
                ShowCheckboxes = false,
                Columns = new List<DataTableColumn>
                {
                    new DataTableColumn { Name = "name", Title = "Project" },
                    new DataTableColumn { Name = "description", Title = "Description", Searchable = false },
                    new DataTableColumn { Name = "modifiedDate", Title = "Date", Type = DataTableColumnType.Date }
                },
                AdditionalOptions = new Dictionary<string, object>
                {
                    { "data", new object[] { } } // Empty for demo - would contain actual data
                }
            };
        }
        <!-- For client-side, you would typically pass data directly -->
        <!-- @await Component.InvokeAsync("DataTable", clientSideConfig) -->
        <div class="alert alert-info">
            <strong>Configuration shown above.</strong> For client-side processing, you would pass the data directly in the AdditionalOptions or modify the component to accept a data parameter.
        </div>
    </div>

    <!-- Example 5: Advanced Configuration -->
    <div class="mb-10">
        <h3>Example 5: Advanced Configuration with Custom Styling</h3>
        @{
            var advancedConfig = new DataTableConfiguration
            {
                Id = "advancedTable",
                Title = "Advanced Projects Table",
                AjaxUrl = Url.Action("GetProjectsData", "Projects"),
                ServerSide = true,
                PageLength = 25,
                ShowCheckboxes = true,
                SearchPlaceholder = "Search projects by name or description...",
                CssClass = "table table-hover align-middle fs-6 gy-5",
                CardCssClass = "card card-flush shadow-sm",
                Columns = new List<DataTableColumn>
                {
                    new DataTableColumn 
                    { 
                        Name = "name", 
                        Title = "Project Name", 
                        ClassName = "fw-bold text-primary min-w-200px",
                        Sortable = true,
                        Searchable = true
                    },
                    new DataTableColumn 
                    { 
                        Name = "description", 
                        Title = "Description", 
                        ClassName = "text-muted",
                        Render = "function(data, type, row) { return data ? (data.length > 50 ? data.substring(0, 50) + '...' : data) : ''; }"
                    },
                    new DataTableColumn 
                    { 
                        Name = "modifiedDate", 
                        Title = "Created", 
                        ClassName = "text-end min-w-125px",
                        Type = DataTableColumnType.Date,
                        Sortable = true,
                        Searchable = false
                    }
                },
                ActionButtons = new List<DataTableActionButton>
                {
                    new DataTableActionButton 
                    { 
                        Text = "Edit", 
                        Controller = "Projects", 
                        Action = "Edit",
                        Icon = "ki-duotone ki-pencil fs-5"
                    },
                    new DataTableActionButton 
                    { 
                        Text = "Archive", 
                        Controller = "Projects", 
                        Action = "Archive",
                        Icon = "ki-duotone ki-archive fs-5",
                        ConfirmAction = true,
                        ConfirmMessage = "Archive this project?"
                    },
                    new DataTableActionButton 
                    { 
                        Text = "Delete", 
                        Controller = "Projects", 
                        Action = "Remove",
                        Icon = "ki-duotone ki-trash fs-5",
                        ConfirmAction = true,
                        ConfirmMessage = "Permanently delete this project? This cannot be undone."
                    }
                },
                HeaderButtons = new List<DataTableActionButton>
                {
                    new DataTableActionButton 
                    { 
                        Text = "Add Project", 
                        Controller = "Projects", 
                        Action = "Edit", 
                        CssClass = "btn btn-primary",
                        Icon = "ki-duotone ki-plus fs-2"
                    },
                    new DataTableActionButton 
                    { 
                        Text = "Import", 
                        Controller = "Projects", 
                        Action = "Import", 
                        CssClass = "btn btn-light-success",
                        Icon = "ki-duotone ki-file-up fs-2"
                    },
                    new DataTableActionButton 
                    { 
                        Text = "Export", 
                        Url = "/api/projects/export", 
                        CssClass = "btn btn-light-primary",
                        Icon = "ki-duotone ki-file-down fs-2"
                    }
                },
                AdditionalOptions = new Dictionary<string, object>
                {
                    { "stateSave", true }, // Save table state
                    { "autoWidth", false },
                    { "scrollX", true }
                }
            };
        }
        @await Component.InvokeAsync("DataTable", advancedConfig)
    </div>

    <!-- Code Examples -->
    <div class="mb-10">
        <h3>How to Use the DataTable ViewComponent</h3>
        <div class="alert alert-primary">
            <h5>1. Basic Usage in Razor View:</h5>
            <pre><code>@@{
    var config = new DataTableConfiguration
    {
        Id = "myTable",
        Title = "My Data Table",
        AjaxUrl = Url.Action("GetData", "MyController"),
        Columns = new List&lt;DataTableColumn&gt;
        {
            new DataTableColumn { Name = "id", Title = "ID" },
            new DataTableColumn { Name = "name", Title = "Name" },
            new DataTableColumn { Name = "email", Title = "Email" }
        }
    };
}

@@await Component.InvokeAsync("DataTable", config)</code></pre>
        </div>

        <div class="alert alert-info">
            <h5>2. Controller Action for DataTables AJAX:</h5>
            <pre><code>[HttpPost]
public async Task&lt;IActionResult&gt; GetData()
{
    var draw = Request.Form["draw"].FirstOrDefault();
    var start = Request.Form["start"].FirstOrDefault();
    var length = Request.Form["length"].FirstOrDefault();
    var searchValue = Request.Form["search[value]"].FirstOrDefault();
    
    // Your data retrieval logic here
    var data = await GetYourData(searchValue, start, length);
    
    return Json(new {
        draw = draw,
        recordsTotal = totalRecords,
        recordsFiltered = filteredRecords,
        data = data
    });
}</code></pre>
        </div>

        <div class="alert alert-warning">
            <h5>3. Required Dependencies:</h5>
            <ul>
                <li>DataTables CSS and JS (already included in your layout)</li>
                <li>jQuery (already included)</li>
                <li>Bootstrap (for styling)</li>
                <li>Moment.js (optional, for date formatting)</li>
            </ul>
        </div>
    </div>
</div>